///Gleb is Always Right

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/rope>

#define fi first
#define se second
#define pb push_back
#define all(x) x.begin(),x.end()
#define sz(x) ((ll)(x).size())
#define unq(x) (x.resize(unique(all(x)) - x.begin()))
#define sqr(x) ((x)*(x))
#define count_one __builtin_popcount(x)

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

typedef tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set;

/*indexed_set s;
s.insert(a);
cout << *s.find_by_order(i) << '\n';
cout << s.order_of_key(k);*/

typedef long long ll;
typedef long double ld;

const ld PI = 3.1415926535;
const ll N = 2e5 + 7;
const ll INF = 1e18 + 7;
const ll d2x[4] = {0, 1, 0, -1};
const ll d2y[4] = {1, 0, -1, 0};
const ll d3x[8] = {1, 1, 1, 0, -1, -1, -1, 0};
const ll d3y[8] = {1, 0, -1, -1, -1, 0, 1, 1};

void indent() {
    cerr << "\n\n\n";
}

ll n;
vector<ll> h(N), el, v[N], f(N), was(N);
pair<ll, ll> T[(ll)1e6];

void dfs(ll pos, ll hi) {
    was[pos] = 1;
    h[pos] = hi;
    el.pb(pos);
    f[pos] = sz(el) - 1;
    for (auto x : v[pos]) {
        if (!was[x]) {
            dfs(x, hi + 1);
            el.pb(pos);
        }
    }
}

void Init(ll v, ll tl, ll tr) {
    if(tr - tl == 1) {
        T[v] = {h[el[tl]], el[tl]};
        return;
    }
    int c = (tl + tr) / 2;
    Init(2 * v + 1, tl, c);
    Init(2 * v + 2, c, tr);
    T[v] = min(T[2 * v + 1], T[2 * v + 2]);
}

pair<ll, ll> Min(ll v, ll tl, ll tr, ll l, ll r) {
    if(tl == l && tr == r)
        return T[v];
    ll c = (tl + tr) / 2;
    pair<ll, ll> ans = {INF, INF};
    if(c > l)
        ans = min(ans, Min(v * 2 + 1, tl, c, l, min(c, r)));
    if(c < r)
        ans = min(ans, Min(v * 2 + 2, c, tr, max(l, c), r));
    return ans;
}

void Solve() {
    cin >> n;
    for (int i = 0; i < n - 1; i++) {
        ll le, ri;
        cin >> le >> ri;
        le--; ri--;
        v[le].pb(ri);
        v[ri].pb(le);
    }
    dfs(0, 0);
    Init(0, 0, sz(el));

    ll q;
    cin >> q;
    for (int i = 0; i < q; i++) {
        ll x, y;
        cin >> x >> y;
        x--; y--;
        cout << Min(0, 0, sz(el), min(f[x], f[y]), max(f[x], f[y]) + 1).se + 1 << '\n';
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    ll tests = 1;
    //cin >> tests;
    while(tests--)
        Solve();
    return 0;
}
